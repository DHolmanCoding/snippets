0001 getting started
SQL is comprised of three main sub-languages:
1. DDL (create and modify database structure)
2. DML (Perform CRUD operations)
   - Insert, select, update, delete (and merge)
3. DCL (control dta stored in database)

0002 identifiers (rules for naming tables, columns, and other db objects)
allowed chars: {a-z, 0-9, _} (must start with letter)

0003 data types
1. DECIMAL/NUMERIC (how-many-places, places-after-decimal
2. FLOAT(more precision)/REAL
3. {tinyint: [0, 255], smallint: [-2^15, 2^14], int: [-2^31, 2^30], bigint: [-2^63, 2^62]}
4. MONEY/SMALLMONEY
5. BINARY/VARBINARY(variable length binary, max 8000 bytes)
6. CHAR/VARCHAR
7. NCHAR/NVARCHAR (unicode)
8. UNIQUEIDENTIFIER (16 bytes UUID)

0004 NULL
by default all columns are nullable, unless we set it to be otherwise
```
CREATE TABLE MyTable
(
 MyCol1 INT NOT NULL, -- non-nullable
 MyCol2 INT NULL -- nullable
) ;
```

0005 SELECT
Aliasing:
```
SELECT
    FName AS "First Name",
    MName AS "Middle Name",
    LName AS "Last Name"
FROM Employees
```

Selecting specified number of records:
```
SELECT Id, ProductName, UnitPrice, Package
FROM Product
ORDER BY UnitPrice DESC
OFFSET 5 ROWS            -- Additional skipping of 5 rows
FETCH FIRST 10 ROWS ONLY -- then take the next 10
``` I think LIMIT 1 OFFSET 1 also works

Selecting with condition:
```
SELECT column1, column2, columnN
FROM table_name
WHERE [condition]
```

Selecting with case (applying logic on the fly):
```
SELECT
    CASE WHEN Col1 < 50 THEN 'under'
        ELSE
            CASE WHEN Col1 > 50 AND Col1 <100 THEN Col1
            ELSE 'over' END
    END threshold
FROM TableName
```

Selection with table alias:
```
SELECT e.Fname, e.LName, m.Fname AS ManagerFirstName
FROM Employees e
    JOIN Managers m ON e.ManagerId = m.Id
```

Selecting with multiple conditions:
```
SELECT name
FROM persons
WHERE (gender = 'M' AND age < 20)
   OR (gender = 'F' AND age > 20);
```

Selection with aggregate functions will work with:
AVG   -- average of values selected
MIN   -- returns minimum of values selected
MAX   -- returns max of values selected
Count -- count of rows that meet all conditions
SUM   -- sum of values selected for all rows

Select with condition of multiple values
```
SELECT * FROM Cars WHERE status IN ( 'Waiting', 'Working' )
```

Get aggregated result for groups of row groups:
``` Number of items in each category
SELECT category, COUNT(*) AS item_count
FROM item
GROUP BY category;
```
NOTE: select only categories that are in the GROUPBY

WHERE -- filters out records BEFORE any grouping is done
HAVING -- filters out records AFTER any grouping is done
ORDER BY -- (A to Z) (0, 1, 2) (ascending by default)

Selecting distinct values only
```
SELECT DISTINCT ContinentCode
FROM Countries;
```

0006 GROUP BY
All results with the same value in the grouped column are aggregated together
Can be thought of as 'for each'

``` Return all books with 3+ authors
SELECT
 b.Id,
 b.Title,
 COUNT(*) NumberOfAuthors
FROM BooksAuthors ba
 INNER JOIN Books b ON b.id = ba.bookid
GROUP BY
 b.Id,
 b.Title
HAVING COUNT(*) > 3 -- equals to HAVING NumberOfAuthors > 3
;
```

<TODO: Skipping some core commands to move onto joins -- I will be back!>
<TODO: ORDER BY>
<TODO: CASE>
<TODO: WHERE and HAVING>

XXXX JOIN
join types: INNER/OUTER/CROSS and LEFT/RIGHT/FULL
join criteria: how table rows relate

```Self joining to produce new internal relationships (This example maps employee to manager)
SELECT
 e.FName AS "Employee",
 m.FName AS "Manager"
FROM
 Employees e
JOIN
 Employees m
 ON e.ManagerId = m.Id
``` A cartesian product is created and then filtered for the JOIN criteria then SELECT is applied

Different join types in SQL specify whether non-matching/matching rows are included in the result

CROSS JOIN: Every row of first table joins will all rows of the second table (x * y rows result)
INNER JOIN: Includes rows in common
LEFT OUTER JOIN: All rows in A and any common rows in B
RIGHT OUTER JOIN: All rows in B and any common rows in A
FULL OUTER JOIN: All rows in both A and B
JOIN visual: https://gyazo.com/f0a3e5a2c9b032c05ba729b03c7649a4
