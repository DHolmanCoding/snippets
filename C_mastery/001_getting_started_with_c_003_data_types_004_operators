Most basic source code file, named hello.c

#include <stdio.h>

int main(void)
{
    puts("Hello, World");
    return 0;
}

gcc hello.c -o hello

Operator precedence:
1. [] and () left to right associativity
2. * right to left associativity

Integer types and constants:
signed char c = 127; /* required to be 1 byte, see remarks for further information. */
signed short int si = 32767; /* required to be at least 16 bits. */
signed int i = 32767; /* required to be at least 16 bits */
signed long int li = 2147483647; /* required to be at least 32 bits. */

Floating point constants:
float f = 0.314f; /* suffix f or F denotes type float */
double d = 0.314; /* no suffix denotes double */
long double ld = 0.314l; /* suffix l or L denotes long double */

String literals:
char* str = "hello, world"; /* string literal */
/* string literals can be used to initialize arrays */
char a1[] = "abc"; /* a1 is char[4] holding {'a','b','c','\0'} */
char a2[4] = "abc"; /* same as a1 */
char a3[3] = "abc"; /* a1 is char[3] holding {'a','b','c'}, missing the '\0' */

Relational Operators:
Equals "==" will check if the operands have the same memory locations
Not Equals "!="
Not/Negation "!" checks whether some value is equal to 0 (same as '== 0')

Conditional/Ternary Operators:
condition ? value_if_true : value_if_false;
a = b ? c : d;
is equivalent to
if (b)
   a = c;
else
   a = d;

Bitwise Operators
& bitwise AND
| bitwise inclusive OR
^ bitwise exclusive OR (XOR)
~ bitwise not (one's complement)
<< logical left shift
>> logical right shift

if (condition_a && condition_b):

Note: Pointers are better named address variables as they point to a address of other variables
Note: an lvalue is an object with a memory location
-> is shorthand for (*x).y which is a dereference of x and a reference
& is the unary "address of" operator which evaluates into a pointer to the objects type and location
* is the dereference operator and evaluates to the object in
  the memory location of the evaluated expression on the RHS.
a[i] is indexing which is equivalent to *(a+i) which takes i steps in memory location and returns the object

Increment operators:
tmp = ++a; /* increments a by one, and returns new value; a == 2, tmp == 2 */
tmp = a++; /* increments a by one, but returns old value; a == 3, tmp == 2 */
tmp = --b; /* decrements b by one, and returns new value; b == 0, tmp == 0 */
tmp = b--; /* decrements b by one, but returns old value; b == -1, tmp == 0 */

Assignment operators:
Assigns the value of the right-hand operand to the storage location named
by the left-hand operand, and returns the value.
