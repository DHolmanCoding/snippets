* Enum objects:

from enum import Enum
class Color(Enum):
    red = 1
    green = 2
    blue = 3
print(Color.red)    # Color.red
print(Color(1))     # Color.red
print(Color['red']) # Color.red

[c for c in Color] # [<Color.red: 1>, <Color.green: 2>, <Color.blue: 3>]

* Sets
# Intersection
{1, 2, 3, 4, 5}.intersection({3, 4, 5, 6}) # {3, 4, 5}
{1, 2, 3, 4, 5} & {3, 4, 5, 6}             # {3, 4, 5}
# Union
{1, 2, 3, 4, 5}.union({3, 4, 5, 6}) # {1, 2, 3, 4, 5, 6}
{1, 2, 3, 4, 5} | {3, 4, 5, 6}      # {1, 2, 3, 4, 5, 6}
# Difference
{1, 2, 3, 4}.difference({2, 3, 5}) # {1, 4}
{1, 2, 3, 4} - {2, 3, 5}           # {1, 4}
# Symmetric difference with
{1, 2, 3, 4}.symmetric_difference({2, 3, 5}) # {1, 4, 5}
{1, 2, 3, 4} ^ {2, 3, 5}                     # {1, 4, 5}
# Superset check
{1, 2}.issuperset({1, 2, 3}) # False
{1, 2} >= {1, 2, 3}          # False
# Subset check
{1, 2}.issubset({1, 2, 3}) # True
{1, 2} <= {1, 2, 3}        # True
# Disjoint check
{1, 2}.isdisjoint({3, 4}) # True
{1, 2}.isdisjoint({1, 4}) # False

For single elements
in/notin
.add(elt)
.discard(elt)
.remove(elt)  # Gives key error if elt not in set

method        in-place operation   in-place method
union         s |= t               update
intersection  s &= t               intersection_update
difference    s -= t               difference_update

To get the unique elements of a list back in a list:
list(set(list))

Counting the number of occurances of elements:
from collections import Counter
counterA = Counter(['a','b','b','c'])  # Counter({'b': 2, 'a': 1, 'c': 1})
