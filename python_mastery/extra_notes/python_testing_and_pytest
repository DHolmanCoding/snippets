# Python testing 101 with pytest

What is testing?
A guarantee of desired functionality that makes your code more self-documenting

Why would I test:
- safety net for future changes
- prove that the code works as desired
- give examples to other of how to use code

Why not unittest from the std library?
you can use a magic overloaded assert

oh, and by the way, here is how to set up a venv:
python3 -m  venv venv
source venv/bin/activate

The general flow for a test body is:
Setup, perform an action, and assert  # Arrange, Act, Assert

# Automating tests with pytest
# https://www.youtube.com/watch?v=8mp_1Jt-xHQ

sudo pip install -U pytest-xdist  # for parallelizing tests
pytest -n auto  # will spin up as many processes as you can for tests
                # Also, it is quite confusing to be honest

Fixtures are functions that pytest calls for you and can do useful work,
or return useful objects before your test runs.

Fixtures have three scopes:
- function  # this is the default I beleive
- modules
- session

Example:
@pytest.fixture
    def useful_object():
        pass

def test_example(fixture_fxn_name):
    pass

# Lisa Roach - Demystifying the Patch Function - PyCon 2018
Mocks are a unittest library and are used to replace an object with another object.
Patch is exactly this, and temporarily replaces your object with a magic mock.

Target: package.module.ClassName

You should mock when you don't want to call an object:
Such as:
- sys calls
- database writes
or when you want to avoid testing multiple coupled functions in a single test

When a function gets patched out, the memory address for the function that got
patched out is re-routed to a MagicMock() object.

Note: The patch target must be importable from your test file

Patch where the object is USED not where it is DEFINED (my_module.db_write)

How you want to call the patch function depends on your scope:
- context managers have a minimal scope and mocks won't live outside their lifespan
- fxn decorators allow mocks to exist for the entire life of a test
- class decorators will let a mock apply to every function in a class
