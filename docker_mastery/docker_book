Containers run in the space on top of an operating system's kernel.
Virtual machines run on a system's physical hardware through a intermediate layer.

examples: github.com/turnbullpress/dockerbook-code

containers use the operating system's normal system call interface

Docker is 'copy-on-write'

Parts fo the Docker CE:
- The docker engine (client and server(a.k.a daemon))
Allows you to interact with the cli binary, docker, and the
RESTful API to interact w3ith the daemon
- Docker images
These can be thought of as source code (building and packing
- Registries
Docker Hub
- Docker containers
Containers are the running/execution aspect of docker
Containers are:
1. An image format
2. A set of standard operations
3. An execution environment

Docker compose: allows you to run stacks of containers to represent application stacks
Docker swarm: allows you to create clusters of containers called swarms
Kubernotes is an orchestration tools that uses docker as an underlying compute layer

Docker technical components:
1. Native linux container format that docker calls libcontainer
2. Linux kernel namespaces which provide isolation for filesystems, processes and networks
    - each file system has its own root filesystem, its own process environment, and virtual
      interfaces with IP addressing between containers.
3. Resource isolation and grouping are done using cgoups
4. copy-on-write filesystems
5. Logging of stdout, stderr and stdin
6. Interactive shell (you can create a pseudo-tty and attach to stdin)

sudo docker run -i -t ubuntu /bin/bash
-i keeps STDIN of the container open from the container
-t tells docker to assign pseudo tty to the container that is to be created.
-it together this will give us an interactive shell

hostname -I to check the IP address of the container that you are in
apt-get update; apt-get install vim

docker ps -a will show us all running containers

using 'exit' will stop the container from running.
sudo docker start <container_id or container_name>
sudo docker attach <> to get back to the bash command prompt
sudo docker stop to terminate our daemonized container
sudo docker rm <container_name> to ultimately delete a container

docker run --name will allow us to give a descriptive name
docker run -d will allow us to run the container in detached mode in the background
without an interactive terminal shell (daemonized container)

'docker logs --tail n <container_name>' to see the last n container logs when debugging
'sudo docker top' will allow you to investigate the processes running inside your container
'sudo docker stats' will allow you to look at basic CPU/memory usage data

'sudo docker exec <flags> <linux command>' will allow us to run processes inside
an existing container.

docker run --restart will restart the container if it fails
ex) --restart=on-failure:5

A docker image is made up of filesystems layered on top of eachother.
At the base is a bootfs which resembles a typical linux/unix book filesystem.
Next, a rootfs is layered on top of the boot filesystem (this stays in read-only mode)
Then, docker uses 'union mount' (which is like pooling the contents of multiple directories)
in order to mount more layers of systems onto the stack. These filesystems are called images

image -> parent_image -> ... -> rootfs -> base_image (bootfs)

Upon launching container from an image:
read/write filesystem -> image -> parent_image -> ... -> base_image

When a docker container first starts the initial read/write layer on the top is
empty, but as changes occur, files are copied from the lower read-only layers.

So, in summary, a container is a read/write layer, knowledge of layers below it, and some
configuration data.

'sudo docker images' will list out all your images

The directory that contains your Dockerfile is called your build environment. When
Docker build is run, the directory and its contents get based to the Docker daemon
which has direct access to all the contents -- code, data and all.

Each instruction in a Dockerfile adds a layer to the image and then commits the image.

FROM is your base image layer
RUN executes commands in the current image

docker build -t <name:0.0.0> <directory OR github repo with the Dockerfile of choice>

.dockerignore works like .gitignore

Running in <container>
<image>

Docker treats previous layers of an image as a cache

ENV sets an environmental variable
CMD specifies the command to be run whe na container is launched. It is similar to RUN, but
instead of running the command while the container is being built, it will run the command as
soon as the container is launched.
So,
sudo docker run -it <image> <command (such as /bin/bash)>
OR
CMD ["/bin/bash"]
do the same thing. Note that CMD requires an array of string arguments.
Note: the docker run command will override the docker CMD command.

ENTRYPOINT is like CMD, but cannot be overridden. For this command, anything passed into
the docker run command will b appended to the end of the entry point upon launch.

ENTRYPOINT can be used in conjunction with CMD for creative use a default and
overridable flags attached to a mandatory command.


